#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define bg begin()
#define en end()
#define Y second
#define X first
typedef long long ll;

#define fi freopen("input.txt","r",stdin)
#define fo freopen("output.txt","w",stdout)

const double pi     =   acos(-1.0);
const double eps    =   1e-8;

#define print(a) cout<<(#a)<<" = "<<a<<"\n";
#define fill(a,val) memset(a ,val, sizeof(a) );
#define sz(s) ((int)(s.size()))

vector <string> parse(string s, string c)
{
  int len = c.length(), p = -len, np;
  vector <string> ans;

  do
    {
      np = s.find(c, p+len);
      ans.push_back(s.substr(p+len, np - p - len));
      p = np;
    }
  while (p != string::npos);

  return ans;
}


/*Solution code starts here */

ll dp[2][1300][1300][2];

class DevuAndBeautifulSubstrings
{
	public:

	int req;
	int N;

	ll solve( int curr , int done , int prev , int pc)
	{

        if( done > req)
	       return 0;

	    if( curr == N+1)
	      {
	          int len = ( curr-prev);
	          int add = len*(len+1)/2;//single walabhi

	          if( done + add == req)
	            return 1;

              return 0;
	      }


	       if( dp[curr&1][done][prev][pc]!=-1)
	         return dp[curr&1][done][prev][pc];


          ll ans =0;
          dp[curr&1][done][prev][pc] = 0;

          //as pc
          int len = curr -prev;
          int add = len*(len+1)/2;
          ans+=solve( curr+1 , done + add , curr , pc);

          //change
          ans+=solve( curr +1 , done , prev , 1-pc);

          return dp[curr&1][done][prev][pc]=ans;

        }

	long long countBeautifulSubstrings(int n, int cnt)
	 {
	     N= n;
	     req=cnt;

	     //rr , int done , int prev , int pc)

	     for(int curr=N;curr>=2;curr--)
	        {
	             fill( dp[curr&1] , -1);

	              for(int done=0;done<=req;done++)
	                for(int prev=0;prev<=curr;prev++)
	                   {
	                       solve( curr , done , prev, 0);
	                       solve( curr , done , prev, 1);
	                   }
	        }


          ll ans = solve(2,0,1,0);

	       ans+=solve(2,0,1,1);

	     //int mx;
		 return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DevuAndBeautifulSubstrings *obj;
	long long answer;
	obj = new DevuAndBeautifulSubstrings();
	clock_t startTime = clock();
	answer = obj->countBeautifulSubstrings(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 4;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 35;
	p2 = 642ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 40;
	p1 = 820;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 94;
	p2 = 32357325751902ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
