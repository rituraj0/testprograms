#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define bg begin()
#define en end()
#define Y second
#define X first
typedef long long ll;

#define fi freopen("input.txt","r",stdin)
#define fo freopen("output.txt","w",stdout)

const double pi     =   acos(-1.0);
const double eps    =   1e-8;

#define print(a) cout<<(#a)<<" = "<<a<<"\n";
#define fill(a,val) memset(a ,val, sizeof(a) );
#define sz(s) ((int)(s.size()))

vector <string> parse(string s, string c)
{
  int len = c.length(), p = -len, np;
  vector <string> ans;

  do
    {
      np = s.find(c, p+len);
      ans.push_back(s.substr(p+len, np - p - len));
      p = np;
    }
  while (p != string::npos);

  return ans;
}


/*Solution code starts here */
#define maxn 105
int val[maxn][maxn][1<<11];
int emask[400][400];//dx , dy pe yahi work karega

vector<string> in;
vector<int> canX,canY;

class Coversta
{
	public:

	int canc;

	int row,col;

	set< pair<int,int> > aval;

	inline bool cool( int a , int b)
	{
		 if( (a<0)|| ( b<0) || (a>=row) || ( b >=col)	)
		 	return false;

		 return true;
	}

	inline int calc_val( int x, int y , int mask)
	{
	    int ans=0;

        for(int i=0;i<canc;i++)
         if( mask&(1<<i))
           {
               	int nx = x + canX[i];
				int ny = y + canY[i];

				if( cool(nx,ny) )
				  ans+= ( in[nx][ny ] -'0');
           }

        return ans;
	}

	inline int calc_mask ( int dx, int dy)
	{
         int ans=0;

       	 for(int i=0;i<canc;i++)
			{
				int  x =  dx + canX[i];
				int  y =  dy + canY[i];

				  if( aval.find( mp(x,y)) == aval.end() )//if alearyd not covered by
				    ans+=(1<<i);//canplace this wihtout disturbace
			}

        return ans;
	}




	int place(vector <string> a, vector <int> x, vector <int> y)
	 {

		row = sz(a);
		col=sz(a[0]);
		in=a;
		canX=x;
        canY=y;
		canc=sz(canX);

		//init aval

		for(int i=0;i<canc;i++)
		 aval.insert( mp(canX[i] , canY[i]) );


        //calcluate value of all mask

		for(int i=0;i<row;i++)
			 for(int j=0;j<col;j++)
                for(int mask =0 ; mask < (1<<canc) ;mask++)
                  {


                    val[i][j][mask]=calc_val(i,j,mask);

                    //cout<<i<<" "<<j<<"  "<<val[i][j][mask]<<endl;
                  }


        //populate can cover
        for(int i=-row;i<row;i++)
         for(int j=-col;j<col;j++)
             {emask[maxn+i][maxn+j]=calc_mask(i,j);
              // cout<<i<<" "<<j<<" "<<emask[i][j]<<endl;
             }

        cout<<"Here\n";

        int ans=0;

        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
              for(int k=0;k<row;k++)
                for(int l=0;l<col;l++)
                  {
                      //print(i);
                      //print(j);

                      int tp = val[i][j][ (1<<canc) - 1 ];
                      int sec_mask = emask[maxn+k-i][maxn+l-j];

                      tp+=val[k][l][sec_mask];

                      //cout<<i<<"  "<<j<<"  "<<k<<" "<<l<<" "<<sec_mask<<" "<<tp<<endl;//<<" "<<

                      ans=max( ans ,tp);

                  }

		return ans;
	 }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	Coversta *obj;
	int answer;
	obj = new Coversta();
	clock_t startTime = clock();
	answer = obj->place(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"11","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"11","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"15","61"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 11;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"151","655","661"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 33;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"303","333","000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 12;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"0000000","1010101"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
