#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define bg begin()
#define en end()
#define Y second
#define X first
typedef long long ll;

#define fi freopen("input.txt","r",stdin)
#define fo freopen("output.txt","w",stdout)

const double pi     =   acos(-1.0);
const double eps    =   1e-8;

#define print(a) cout<<(#a)<<" = "<<a<<"\n";
#define fill(a,val) memset(a ,val, sizeof(a) );
#define sz(s) ((int)(s.size()))

vector <string> parse(string s, string c)
{
  int len = c.length(), p = -len, np;
  vector <string> ans;

  do
    {
      np = s.find(c, p+len);
      ans.push_back(s.substr(p+len, np - p - len));
      p = np;
    }
  while (p != string::npos);

  return ans;
}


/*Solution code starts here */
#define maxn 1001

double memo[maxn][27][maxn];

double prob[28];

char  in[maxn];
int n;

int opt;

class SquareScores
{
public:

double solve( int curr , char pc , int plen )
{
     if( curr==n)
     {
         return plen*(plen+1)/2;
     }

     if( memo[curr][pc][plen] > -1 )
         return memo[curr][pc][plen];

     memo[curr][pc][plen] = 0;

     double ans =0;

     if( in[curr]!=0)//not a ?
     {
         if( in[curr] == pc)
            {
                ans = solve(curr+1, pc , plen+1);
            }
         else
           {
              ans = plen*(plen+1)/2 +  solve( curr+1 , in[curr] , 1 );
           }
     }
    else
    {
        for(int i=1;i<=opt;i++)//try this char
        {
            double tp = 0;

            if( i == pc)
               {
                 tp = solve(curr+1, pc , plen+1);
               }
            else
              {
                 tp = plen*(plen+1)/2 + solve( curr+1 , i , 1 );
              }

            ans += prob[i]*tp;
        }
    }

    return memo[curr][pc][plen] = ans;
}

double calcexpectation(vector <int> p, string s)
{
   fill( prob , 0);

   n = sz(s);

   for(int i=0;i<n;i++)
     if( s[i]=='?')
       in[i]=0;
     else
      in[i]= (s[i]-'a') +1 ;


  //prob
   for(int  i = 0 ; i < sz(p) ; i++ )
     prob[i+1]= ((double)p[i])/100.0;

    opt = sz(p);

//     for(int i=0;i<n;i++)
//        cout<<in[i]<<" ";
//
//     cout<<endl;
//
//     for(int i =0 ;i<=27;i++)
//         cout<<prob[i]<<" ";
//
//     cout<<endl;


   fill( memo ,-2);

   for(int cl = n ; cl >=0; cl--)
     for(char ch = 0 ; ch <= opt ; ch++)
      for(int len = 0 ; len <= cl ; len++)
         solve( cl , ch , len);

   return memo[0][0][0];

  // return solve(0,0,0);
}

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	SquareScores *obj;
	double answer;
	obj = new SquareScores();
	clock_t startTime = clock();
	answer = obj->calcexpectation(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	string p1;
	double p2;

	{
	// ----- test 0 -----
	int t0[] = {1,99};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "aaaba";
	p2 = 8.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {10,20,70};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "aa?bbbb";
	p2 = 15.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {10,20,30,40};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "a?" "?c?dc?b";
	p2 = 11.117;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {25,25,21,2,2,25};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "a?" "?b?" "?" "?" "?" "?" "?" "?ff?" "?e";
	p2 = 21.68512690712425;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {4,4,4,3,4,4,4,4,4,4,3,4,4,4,3,4,4,4,4,4,4,4,3,4,4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p2 = 31.16931963781721;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {4,3,4,3,8,2,4,3,4,4,3,2,4,4,3,4,2,4,7,6,4,4,3,4,4,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "makigotapresentfromniko";
	p2 = 23.0;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
